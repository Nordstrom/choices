syntax = "proto3";

// The ElwinStorage service definition
service ElwinStorage {
  // All returns all the namespaces for a given environment.
  rpc All(AllRequest) returns (AllReply) {}

  // Create creates a namespace in the given environment.
  rpc Create(CreateRequest) returns (CreateReply) {}

  // Read returns the namespace matching the supplied name from the given
  // environment.
  rpc Read(ReadRequest) returns (ReadReply) {}

  // Update replaces the namespace in the given environment with the namespace
  // supplied.
  rpc Update(UpdateRequest) returns (UpdateReply) {}

  // Delete deletes the namespace from the given environment.
  rpc Delete(DeleteRequest) returns (DeleteReply) {}
}

// AllRequest retuns all the experiments from the given environment.
message AllRequest {
  Environment environment = 1;
}

// The response message containing the Namespaces
message AllReply {
  repeated Namespace namespaces = 1;
}

// CreateRequest request message to create a new namespace in an environment.
message CreateRequest {
  Namespace namespace = 1;
  Environment environment = 2;
}

// CreateReply response containing the newly created Namespace.
message CreateReply {
  Namespace namespace = 1;
}

// ReadRequest request message to get a namespace by name.
message ReadRequest {
  string name = 1;
  Environment environment = 2;
}

// ReadReply response containing the namespace requested.
message ReadReply {
  Namespace namespace = 1;
}

// UpdateRequest request message to update an existing namespace in an
// environment.
message UpdateRequest {
  Namespace namespace = 1;
  Environment environment = 2;
}

// UpdateReply response containing the updated namespace.
message UpdateReply {
  Namespace namespace = 1;
}

// DeleteRequest request message to delete an existing namespace from an
// environment.
message DeleteRequest {
  string name = 1;
  Environment environment = 2;
}

// DeleteReply response containing the deleted namespace.
message DeleteReply {
  Namespace namespace = 1;
}

// Environment structure
enum Environment {
  Staging = 0;
  Production = 1;
}

// Namespace structure
message Namespace {
  string name = 1;
  repeated string labels = 2;
  repeated Experiment experiments = 3;
}

// Experiment structure
message Experiment {
  string name = 1;
  bytes segments = 2;
  repeated Param params = 3;
}

// Param structure
message Param {
  string name = 1;
  Value value = 2;
}

// Value structure
message Value {
  repeated string choices = 1;
  repeated double weights = 2;
}
